set nocompatible              " be iMproved, required
filetype off                  " required

if has('nvim')
	call plug#begin('~/.config/nvim/plugged')
else
	call plug#begin('~/.vim/bundle')
endif

" GIT support
Plug 'tpope/vim-fugitive'
"Plug 'shumphrey/fugitive-gitlab.vim'
"Plug 'linuxsuren/fugitive-gitee.vim'
Plug 'junegunn/gv.vim'
Plug 'airblade/vim-gitgutter'
Plug 'gregsexton/gitv'

" TODO per project
Plug 'vuciv/vim-bujo'

" Mercurial support
Plug 'ludovicchabant/vim-lawrencium'

" Statusline
" Plug 'vim-airline/vim-airline'
Plug 'hardcoreplayers/spaceline.vim'

" UI
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
"" Nerdtree show git status
"Plug 'Xuyuanp/nerdtree-git-plugin'
"" highlight file icons with different colors
"Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

Plug 'szw/vim-maximizer'

" Cool icons
Plug 'ryanoasis/vim-devicons'

Plug 'scrooloose/nerdcommenter'
Plug 'mbbill/undotree'
"Plug 'sjl/gundo.vim'
Plug 'mhinz/vim-startify'

" Autocomplete and Snippets
Plug 'neoclide/coc.nvim', {'branch': 'release'}
"Plug 'tpope/vim-surround'
Plug 'honza/vim-snippets'

"Plug 'JuliaEditorSupport/julia-vim'

" Fuzzy finders
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf'

" Jupyter editing
Plug 'goerz/jupytext.vim'

" Markdown
Plug 'plasticboy/vim-markdown'
Plug 'suan/vim-instant-markdown', {'for': 'markdown'}

" Terminal
Plug 'kassio/neoterm'
Plug 'voldikss/vim-floaterm'

" Utilities
Plug 'freitass/todo.txt-vim'
Plug 'Rykka/riv.vim'
"Plug 'Rykka/InstantRst'
Plug 'rhysd/vim-grammarous'
"Plug 'http://github.com/vim-latex/vim-latex'

" Testing
Plug 'janko-m/vim-test'
Plug 'tpope/vim-dispatch'

" HTML and Vue development
"Plug 'posva/vim-vue'
"Plug 'othree/html5.vim'

" vim Wiki
Plug 'https://github.com/vimwiki/vimwiki.git'

" colorschemes
"Plug 'hzchirs/vim-material'
Plug 'kaicataldo/material.vim'
Plug 'arcticicestudio/nord-vim'
Plug 'chriskempson/vim-tomorrow-theme'
Plug 'altercation/vim-colors-solarized'
Plug 'chriskempson/base16-vim'
Plug 'tomasiser/vim-code-dark'
Plug 'joshdick/onedark.vim'
Plug 'rakr/vim-one'

call plug#end()

filetype plugin indent on
set number relativenumber
syntax on

if (has('termguicolors'))
  set termguicolors
endif

"inoremap <C-d> <Del>

let mapleader=" "
set completeopt=menu,menuone,noselect " better autocomplete options
set mouse=a " if I accidentally use the mouse
set splitright " splits to the right
set splitbelow " splits below
set expandtab " space characters instead of tab
set tabstop=4 " tab equals 2 spaces
set shiftwidth=4 " indentation
set softtabstop=4
set number relativenumber " show relative line numbers
set ignorecase " search case insensitive
set smartcase " search via smartcase
set incsearch " search incremental
set diffopt+=vertical " starts diff mode in vertical split
set hidden " allow hidden buffers
set nobackup " don't create backup files
set nowritebackup " don't create backup files
set cmdheight=1 " only one line for commands
set shortmess+=c " don't need to press enter so often
set signcolumn=yes " add a column for sings (e.g. GitGutter, LSP, ...)
set updatetime=320 " time until update
set undofile " persists undo tree
set formatoptions-=o
set nrformats+=alpha " Allow incrementing letters
set nrformats-=octal " Always assume decimal numbers

" persistent undo between file reloads
if has('persistent_undo')
	set undofile
	set undodir=~/.vim/tmp,.
endif

"set shell=sh
"set clipboard+=unnamedplus
"set mouse=a

" Todo configuration
nmap <C-S> <Plug>BujoAddnormal
imap <C-S> <Plug>BujoAddinsert
nmap <C-Q> <Plug>BujoChecknormal
imap <C-Q> <Plug>BujoCheckinsert



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" COC CONFIGURATION
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


" use <tab> for trigger completion and navigate to the next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

"inoremap <silent><expr> <Tab>
      "\ pumvisible() ? coc#_select_confirm() :
      "\ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      "\ <SID>check_back_space() ? "\<Tab>" :
      "\ coc#refresh()

"let g:coc_snippet_next = 'tab'

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
if has('patch8.1.1068')
  " Use `complete_info` if your (Neo)Vim version supports it.
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

"inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
"inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap cf  <Plug>(coc-format-selected)

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use <tab> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <S-TAB> <Plug>(coc-range-select-backword)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" szw/vim-maximizer
nnoremap <silent> <leader>m :MaximizerToggle!<CR>

" git-gutter
nmap ]h <Plug>(GitGutterNextHunk)
nmap [h <Plug>(GitGutterPrevHunk)

" vim-markdown
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_toc_autofit = 1
set conceallevel=2
let g:vim_markdown_conceal_code_blocks = 0

" vim-instant-markdown
let g:instant_markdown_autostart = 0

"set spelllang=fr
nmap ss 1z=
let g:grammarous#default_comments_only_filetypes = {
            \ '*' : 1, 'mail' : 0, 'markdown' : 0,
            \ }
"let g:grammarous#use_vim_spelllang = 1
"g:grammarous#use_location_list = 1
let g:grammarous#hooks = {}
function! g:grammarous#hooks.on_check(errs) abort
    nmap <buffer><C-n> <Plug>(grammarous-move-to-next-error)
    nmap <buffer><C-p> <Plug>(grammarous-move-to-previous-error)
    nmap <buffer><leader>f <Plug>(grammarous-fixit)
endfunction

function! g:grammarous#hooks.on_reset(errs) abort
    nunmap <buffer><C-n>
    nunmap <buffer><C-p>
	nunmap <leader>f
endfunction

" Add fzf to the path
set rtp+=/usr/local/opt/fzf

set signcolumn=yes
"set wildmode=full

" set highlighting for search and map a key to deactivate the highlighting
set hlsearch
nnoremap <silent> <Leader>/ :nohlsearch<CR>

" automatically reload vimrc when it's saved
if has('nvim')
	au BufWritePost vimrc so ~/.config/nvim/init.vim
else
	au BufWritePost vimrc so ~/.vimrc
endif

" airline settings
let g:airline_powerline_fonts = 1

" Powerline font setup
set guifont=Sauce\ Code\ Pro
let g:Powerline_symbols = 'fancy'
"set guifont=Source\ Code\ Pro\ for\ Powerline

set laststatus=2
"set statusline^=%{coc#status()}

set background=dark
colorscheme	codedark

set shiftwidth=4
set tabstop=4
set softtabstop=4

" Window movement
map <C-j> <c-w>j
map <C-k> <c-w>k
map <C-l> <c-w>l
map <C-h> <c-w>h

" Terminal and neoterm
let g:neoterm_autoinsert="1"
let g:neoterm_repl_python="ipython"
let g:neoterm_shell="fish"
tnoremap <Esc> <C-\><C-n>
tnoremap <C-h> <C-\><C-N><C-w>h
tnoremap <C-j> <C-\><C-N><C-w>j
tnoremap <C-k> <C-\><C-N><C-w>k
tnoremap <C-l> <C-\><C-N><C-w>l
inoremap <C-h> <C-\><C-N><C-w>h
inoremap <C-j> <C-\><C-N><C-w>j
inoremap <C-k> <C-\><C-N><C-w>k
inoremap <C-l> <C-\><C-N><C-w>l
nnoremap <silent> <leader><space> :vertical botright Ttoggle<cr>
tnoremap <silent> <leader><space> <C-\><C-n>:Ttoggle<cr>
" Use gx{text-object} in normal mode
nmap gx <Plug>(neoterm-repl-send)
" Send selected contents in visual mode.
xmap gx <Plug>(neoterm-repl-send)
nmap gxx <Plug>(neoterm-repl-send-line)

" vim-test mappings
nmap <silent> t<C-n> :TestNearest<CR> " t Ctrl+n
nmap <silent> t<C-f> :TestFile<CR>    " t Ctrl+f
nmap <silent> t<C-s> :TestSuite<CR>   " t Ctrl+s
nmap <silent> t<C-l> :TestLast<CR>    " t Ctrl+l
nmap <silent> t<C-g> :TestVisit<CR>   " t Ctrl+g
let test#python#runner = 'pytest'
let test#strategy = "neoterm"
"let test#strategy = "asyncrun"
"let test#strategy = "iterm"
"let test#strategy = "vimterminal"

" gundo mapping
map <leader>gu :GundoToggle<CR>

" nerdtree mapping
map <leader>nt :NERDTreeToggle<CR>

" when scrolling, keep cursor 3 lines away from screen border
set scrolloff=3

" setting for Startify
let g:startify_bookmarks = ['~/src/gogs/dotfiles/vimrc', '~/Documents/notes/projects/', '~/Dropbox/Apps/Simpletask/todo.txt']

